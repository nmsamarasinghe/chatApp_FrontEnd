{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\mern-chat-app-master\\\\frontend\\\\src\\\\components\\\\miscellaneous\\\\UpdateGroupChatModal.js\",\n    _s = $RefreshSig$();\n\nimport { ViewIcon } from \"@chakra-ui/icons\";\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, Button, useDisclosure, FormControl, Input, useToast, Box, IconButton, Spinner } from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UpdateGroupChatModal = ({\n  fetchMessages,\n  fetchAgain,\n  setFetchAgain\n}) => {\n  _s();\n\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n  const {\n    selectedChat,\n    setSelectedChat,\n    user\n  } = ChatState();\n\n  const handleSearch = async query => {\n    setSearch(query);\n\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\"\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.put(`/api/chat/rename`, {\n        chatId: selectedChat._id,\n        chatName: groupChatName\n      }, config);\n      console.log(data._id); // setSelectedChat(\"\");\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n      setRenameLoading(false);\n    }\n\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async user1 => {\n    if (selectedChat.users.find(u => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.put(`/api/chat/groupadd`, {\n        chatId: selectedChat._id,\n        userId: user1._id\n      }, config);\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n      setLoading(false);\n    }\n\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async user1 => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.put(`/api/chat/groupremove`, {\n        chatId: selectedChat._id,\n        userId: user1._id\n      }, config);\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n      setLoading(false);\n    }\n\n    setGroupChatName(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      d: {\n        base: \"flex\"\n      },\n      icon: /*#__PURE__*/_jsxDEV(ViewIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 46\n      }, this),\n      onClick: onOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: onClose,\n      isOpen: isOpen,\n      isCentered: true,\n      children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          fontSize: \"35px\",\n          fontFamily: \"Work sans\",\n          d: \"flex\",\n          justifyContent: \"center\",\n          children: selectedChat.chatName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          d: \"flex\",\n          flexDir: \"column\",\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            w: \"100%\",\n            d: \"flex\",\n            flexWrap: \"wrap\",\n            pb: 3,\n            children: selectedChat.users.map(u => /*#__PURE__*/_jsxDEV(UserBadgeItem, {\n              user: u,\n              admin: selectedChat.groupAdmin,\n              handleFunction: () => handleRemove(u)\n            }, u._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            d: \"flex\",\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"Chat Name\",\n              mb: 3,\n              value: groupChatName,\n              onChange: e => setGroupChatName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"solid\",\n              colorScheme: \"teal\",\n              ml: 1,\n              isLoading: renameloading,\n              onClick: handleRename,\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"Add User to group\",\n              mb: 1,\n              onChange: e => handleSearch(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this), loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n            size: \"lg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this) : searchResult === null || searchResult === void 0 ? void 0 : searchResult.map(user => /*#__PURE__*/_jsxDEV(UserListItem, {\n            user: user,\n            handleFunction: () => handleAddUser(user)\n          }, user._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => handleRemove(user),\n            colorScheme: \"red\",\n            children: \"Leave Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UpdateGroupChatModal, \"AqlGJFgXOkUwCEzUNk0N4v7uW8c=\", false, function () {\n  return [useDisclosure, useToast];\n});\n\n_c = UpdateGroupChatModal;\nexport default UpdateGroupChatModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateGroupChatModal\");","map":{"version":3,"sources":["C:/Users/User/Desktop/mern-chat-app-master/frontend/src/components/miscellaneous/UpdateGroupChatModal.js"],"names":["ViewIcon","Modal","ModalOverlay","ModalContent","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","Button","useDisclosure","FormControl","Input","useToast","Box","IconButton","Spinner","axios","useState","ChatState","UserBadgeItem","UserListItem","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","isOpen","onOpen","onClose","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","loading","setLoading","renameloading","setRenameLoading","toast","selectedChat","setSelectedChat","user","handleSearch","query","config","headers","Authorization","token","data","get","console","log","error","title","description","status","duration","isClosable","position","handleRename","put","chatId","_id","chatName","response","message","handleAddUser","user1","users","find","u","groupAdmin","userId","handleRemove","base","map","e","target","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SACEC,KADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,WALF,EAMEC,SANF,EAOEC,gBAPF,EAQEC,MARF,EASEC,aATF,EAUEC,WAVF,EAWEC,KAXF,EAYEC,QAZF,EAaEC,GAbF,EAcEC,UAdF,EAeEC,OAfF,QAgBO,kBAhBP;AAiBA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;;;AAEA,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,UAAjB;AAA6BC,EAAAA;AAA7B,CAAD,KAAkD;AAAA;;AAC7E,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,MAA8BlB,aAAa,EAAjD;AACA,QAAM,CAACmB,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,EAAlD;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACiB,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACmB,aAAD,EAAgBC,gBAAhB,IAAoCpB,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAMqB,KAAK,GAAG1B,QAAQ,EAAtB;AAEA,QAAM;AAAE2B,IAAAA,YAAF;AAAgBC,IAAAA,eAAhB;AAAiCC,IAAAA;AAAjC,MAA0CvB,SAAS,EAAzD;;AAEA,QAAMwB,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpCZ,IAAAA,SAAS,CAACY,KAAD,CAAT;;AACA,QAAI,CAACA,KAAL,EAAY;AACV;AACD;;AAED,QAAI;AACFR,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMS,MAAM,GAAG;AACbC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAG,UAASL,IAAI,CAACM,KAAM;AAD7B;AADI,OAAf;AAKA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMhC,KAAK,CAACiC,GAAN,CAAW,oBAAmBnB,MAAO,EAArC,EAAwCc,MAAxC,CAAvB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAb,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,MAAAA,eAAe,CAACe,IAAD,CAAf;AACD,KAXD,CAWE,OAAOI,KAAP,EAAc;AACdd,MAAAA,KAAK,CAAC;AACJe,QAAAA,KAAK,EAAE,gBADH;AAEJC,QAAAA,WAAW,EAAE,mCAFT;AAGJC,QAAAA,MAAM,EAAE,OAHJ;AAIJC,QAAAA,QAAQ,EAAE,IAJN;AAKJC,QAAAA,UAAU,EAAE,IALR;AAMJC,QAAAA,QAAQ,EAAE;AANN,OAAD,CAAL;AAQAvB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GA5BD;;AA8BA,QAAMwB,YAAY,GAAG,YAAY;AAC/B,QAAI,CAAC/B,aAAL,EAAoB;;AAEpB,QAAI;AACFS,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA,YAAMO,MAAM,GAAG;AACbC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAG,UAASL,IAAI,CAACM,KAAM;AAD7B;AADI,OAAf;AAKA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMhC,KAAK,CAAC4C,GAAN,CACpB,kBADoB,EAErB;AACEC,QAAAA,MAAM,EAAEtB,YAAY,CAACuB,GADvB;AAEEC,QAAAA,QAAQ,EAAEnC;AAFZ,OAFqB,EAMrBgB,MANqB,CAAvB;AASAM,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACc,GAAjB,EAhBE,CAiBF;;AACAtB,MAAAA,eAAe,CAACQ,IAAD,CAAf;AACAxB,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACAc,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD,KArBD,CAqBE,OAAOe,KAAP,EAAc;AACdd,MAAAA,KAAK,CAAC;AACJe,QAAAA,KAAK,EAAE,gBADH;AAEJC,QAAAA,WAAW,EAAEF,KAAK,CAACY,QAAN,CAAehB,IAAf,CAAoBiB,OAF7B;AAGJV,QAAAA,MAAM,EAAE,OAHJ;AAIJC,QAAAA,QAAQ,EAAE,IAJN;AAKJC,QAAAA,UAAU,EAAE,IALR;AAMJC,QAAAA,QAAQ,EAAE;AANN,OAAD,CAAL;AAQArB,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD;;AACDR,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,GApCD;;AAsCA,QAAMqC,aAAa,GAAG,MAAOC,KAAP,IAAiB;AACrC,QAAI5B,YAAY,CAAC6B,KAAb,CAAmBC,IAAnB,CAAyBC,CAAD,IAAOA,CAAC,CAACR,GAAF,KAAUK,KAAK,CAACL,GAA/C,CAAJ,EAAyD;AACvDxB,MAAAA,KAAK,CAAC;AACJe,QAAAA,KAAK,EAAE,wBADH;AAEJE,QAAAA,MAAM,EAAE,OAFJ;AAGJC,QAAAA,QAAQ,EAAE,IAHN;AAIJC,QAAAA,UAAU,EAAE,IAJR;AAKJC,QAAAA,QAAQ,EAAE;AALN,OAAD,CAAL;AAOA;AACD;;AAED,QAAInB,YAAY,CAACgC,UAAb,CAAwBT,GAAxB,KAAgCrB,IAAI,CAACqB,GAAzC,EAA8C;AAC5CxB,MAAAA,KAAK,CAAC;AACJe,QAAAA,KAAK,EAAE,8BADH;AAEJE,QAAAA,MAAM,EAAE,OAFJ;AAGJC,QAAAA,QAAQ,EAAE,IAHN;AAIJC,QAAAA,UAAU,EAAE,IAJR;AAKJC,QAAAA,QAAQ,EAAE;AALN,OAAD,CAAL;AAOA;AACD;;AAED,QAAI;AACFvB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMS,MAAM,GAAG;AACbC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAG,UAASL,IAAI,CAACM,KAAM;AAD7B;AADI,OAAf;AAKA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMhC,KAAK,CAAC4C,GAAN,CACpB,oBADoB,EAErB;AACEC,QAAAA,MAAM,EAAEtB,YAAY,CAACuB,GADvB;AAEEU,QAAAA,MAAM,EAAEL,KAAK,CAACL;AAFhB,OAFqB,EAMrBlB,MANqB,CAAvB;AASAJ,MAAAA,eAAe,CAACQ,IAAD,CAAf;AACAxB,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACAY,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAnBD,CAmBE,OAAOiB,KAAP,EAAc;AACdd,MAAAA,KAAK,CAAC;AACJe,QAAAA,KAAK,EAAE,gBADH;AAEJC,QAAAA,WAAW,EAAEF,KAAK,CAACY,QAAN,CAAehB,IAAf,CAAoBiB,OAF7B;AAGJV,QAAAA,MAAM,EAAE,OAHJ;AAIJC,QAAAA,QAAQ,EAAE,IAJN;AAKJC,QAAAA,UAAU,EAAE,IALR;AAMJC,QAAAA,QAAQ,EAAE;AANN,OAAD,CAAL;AAQAvB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AACDN,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,GAtDD;;AAwDA,QAAM4C,YAAY,GAAG,MAAON,KAAP,IAAiB;AACpC,QAAI5B,YAAY,CAACgC,UAAb,CAAwBT,GAAxB,KAAgCrB,IAAI,CAACqB,GAArC,IAA4CK,KAAK,CAACL,GAAN,KAAcrB,IAAI,CAACqB,GAAnE,EAAwE;AACtExB,MAAAA,KAAK,CAAC;AACJe,QAAAA,KAAK,EAAE,iCADH;AAEJE,QAAAA,MAAM,EAAE,OAFJ;AAGJC,QAAAA,QAAQ,EAAE,IAHN;AAIJC,QAAAA,UAAU,EAAE,IAJR;AAKJC,QAAAA,QAAQ,EAAE;AALN,OAAD,CAAL;AAOA;AACD;;AAED,QAAI;AACFvB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMS,MAAM,GAAG;AACbC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAG,UAASL,IAAI,CAACM,KAAM;AAD7B;AADI,OAAf;AAKA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMhC,KAAK,CAAC4C,GAAN,CACpB,uBADoB,EAErB;AACEC,QAAAA,MAAM,EAAEtB,YAAY,CAACuB,GADvB;AAEEU,QAAAA,MAAM,EAAEL,KAAK,CAACL;AAFhB,OAFqB,EAMrBlB,MANqB,CAAvB;AASAuB,MAAAA,KAAK,CAACL,GAAN,KAAcrB,IAAI,CAACqB,GAAnB,GAAyBtB,eAAe,EAAxC,GAA6CA,eAAe,CAACQ,IAAD,CAA5D;AACAxB,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACAD,MAAAA,aAAa;AACba,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KApBD,CAoBE,OAAOiB,KAAP,EAAc;AACdd,MAAAA,KAAK,CAAC;AACJe,QAAAA,KAAK,EAAE,gBADH;AAEJC,QAAAA,WAAW,EAAEF,KAAK,CAACY,QAAN,CAAehB,IAAf,CAAoBiB,OAF7B;AAGJV,QAAAA,MAAM,EAAE,OAHJ;AAIJC,QAAAA,QAAQ,EAAE,IAJN;AAKJC,QAAAA,UAAU,EAAE,IALR;AAMJC,QAAAA,QAAQ,EAAE;AANN,OAAD,CAAL;AAQAvB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AACDN,IAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,GA5CD;;AA8CA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,CAAC,EAAE;AAAE6C,QAAAA,IAAI,EAAE;AAAR,OAAf;AAAiC,MAAA,IAAI,eAAE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAAvC;AAAqD,MAAA,OAAO,EAAEhD;AAA9D;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEC,OAAhB;AAAyB,MAAA,MAAM,EAAEF,MAAjC;AAAyC,MAAA,UAAU,MAAnD;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAA,gCACE,QAAC,WAAD;AACE,UAAA,QAAQ,EAAC,MADX;AAEE,UAAA,UAAU,EAAC,WAFb;AAGE,UAAA,CAAC,EAAC,MAHJ;AAIE,UAAA,cAAc,EAAC,QAJjB;AAAA,oBAMGc,YAAY,CAACwB;AANhB;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,gBAVF,eAWE,QAAC,SAAD;AAAW,UAAA,CAAC,EAAC,MAAb;AAAoB,UAAA,OAAO,EAAC,QAA5B;AAAqC,UAAA,UAAU,EAAC,QAAhD;AAAA,kCACE,QAAC,GAAD;AAAK,YAAA,CAAC,EAAC,MAAP;AAAc,YAAA,CAAC,EAAC,MAAhB;AAAuB,YAAA,QAAQ,EAAC,MAAhC;AAAuC,YAAA,EAAE,EAAE,CAA3C;AAAA,sBACGxB,YAAY,CAAC6B,KAAb,CAAmBO,GAAnB,CAAwBL,CAAD,iBACtB,QAAC,aAAD;AAEE,cAAA,IAAI,EAAEA,CAFR;AAGE,cAAA,KAAK,EAAE/B,YAAY,CAACgC,UAHtB;AAIE,cAAA,cAAc,EAAE,MAAME,YAAY,CAACH,CAAD;AAJpC,eACOA,CAAC,CAACR,GADT;AAAA;AAAA;AAAA;AAAA,oBADD;AADH;AAAA;AAAA;AAAA;AAAA,kBADF,eAWE,QAAC,WAAD;AAAa,YAAA,CAAC,EAAC,MAAf;AAAA,oCACE,QAAC,KAAD;AACE,cAAA,WAAW,EAAC,WADd;AAEE,cAAA,EAAE,EAAE,CAFN;AAGE,cAAA,KAAK,EAAElC,aAHT;AAIE,cAAA,QAAQ,EAAGgD,CAAD,IAAO/C,gBAAgB,CAAC+C,CAAC,CAACC,MAAF,CAASC,KAAV;AAJnC;AAAA;AAAA;AAAA;AAAA,oBADF,eAOE,QAAC,MAAD;AACE,cAAA,OAAO,EAAC,OADV;AAEE,cAAA,WAAW,EAAC,MAFd;AAGE,cAAA,EAAE,EAAE,CAHN;AAIE,cAAA,SAAS,EAAE1C,aAJb;AAKE,cAAA,OAAO,EAAEuB,YALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXF,eA4BE,QAAC,WAAD;AAAA,mCACE,QAAC,KAAD;AACE,cAAA,WAAW,EAAC,mBADd;AAEE,cAAA,EAAE,EAAE,CAFN;AAGE,cAAA,QAAQ,EAAGiB,CAAD,IAAOlC,YAAY,CAACkC,CAAC,CAACC,MAAF,CAASC,KAAV;AAH/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBA5BF,EAoCG5C,OAAO,gBACN,QAAC,OAAD;AAAS,YAAA,IAAI,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,kBADM,GAGNF,YAHM,aAGNA,YAHM,uBAGNA,YAAY,CAAE2C,GAAd,CAAmBlC,IAAD,iBAChB,QAAC,YAAD;AAEE,YAAA,IAAI,EAAEA,IAFR;AAGE,YAAA,cAAc,EAAE,MAAMyB,aAAa,CAACzB,IAAD;AAHrC,aACOA,IAAI,CAACqB,GADZ;AAAA;AAAA;AAAA;AAAA,kBADF,CAvCJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXF,eA2DE,QAAC,WAAD;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAE,MAAMW,YAAY,CAAChC,IAAD,CAAnC;AAA2C,YAAA,WAAW,EAAC,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBA3DF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AA0ED,CA/PD;;GAAMpB,oB;UACgCZ,a,EAMtBG,Q;;;KAPVS,oB;AAiQN,eAAeA,oBAAf","sourcesContent":["import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n"]},"metadata":{},"sourceType":"module"}